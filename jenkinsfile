pipeline{
    agent {
        // speicify the label of the jenkins worker
        label 'orange-pi'
    }

    tools{
        // Tools we use later in the pipeline.
        jdk 'Java17'
        maven 'Maven3'
    }

    environment{
        // ENV VARS for later use in pipeline
        APP_NAME          = "complete-production-e2e-pipeline-project"
        RELEASE           = "1.0.0"
        DOCKER_USER       = 'darktang3nt'
        DOCKER_PASS       = 'dockerhub'
        // ${} syntax can be used to reference other env vars
        IMAGE_NAME        = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        // BUILD_NUMBER is jenkins provided env vars.
        IMAGE_TAG         = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }
    
    stages{
        stage('clean'){
            steps{
                // clean workspace
                cleanWs() 
            }
        }
     
        stage('Checkout from SCM'){
            steps{
                // Clone the main branch of the repo
                git branch: 'main', url : 'https://github.com/darktang3nt69/complete-production-e2e-pipeline.git'
            }
            
        }
        stage('Building the java application'){
            steps{
                // Build the Java application
                sh 'mvn clean package'
            }
            
        }
        stage('Testing the java application'){
            steps{
                // Run the test cases
                sh 'mvn test'
            }
            
        }
        stage('sonarqube analysis'){
            steps{
                // trigger sonarqube analysis
                withSonarQubeEnv(credentialsId: 'sonarqube-token', installationName: 'sonarqube scanner'){
                    sh 'mvn sonar:sonar'
                }
            }
            
        }
        stage('Quality Gate'){
            steps{  
                // wait for quality gate to finish. Do not fail the pipline if not passed.
                waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-token'
            }
        }

        stage('Build and push to dockerhub'){
            steps{
                script{
                    // Build the docker image.
                    docker.withRegistry('', DOCKER_PASS){
                    docker_image = docker.build("${IMAGE_NAME}")
                }
                // Push docker image with latest and ${IMAGE_TAG} tags.
                docker.withRegistry('', DOCKER_PASS){
                    docker_image.push("${IMAGE_TAG}")
                    docker_image.push('latest')
                }

                }  
            }
        }
        stage("Trivy Scan") {
            steps {
                script {
		   sh ("docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${IMAGE_NAME}:${IMAGE_TAG} --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table")
                }
            }
        }

        stage ('Cleanup Artifacts') {
            steps {
                script {
                    sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker rmi ${IMAGE_NAME}:latest"
                }
            }
        }

        stage("Trigger CD Pipeline") {
            steps {
                script {
                    sh "curl -v -k --user admin:${JENKINS_API_TOKEN} -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' --data 'IMAGE_TAG=${IMAGE_TAG}' '${JENKINS_URL}/job/gitops-complete-pipeline/buildWithParameters?token=gitops-token'"
                }
            }
        }
            
    }

}
